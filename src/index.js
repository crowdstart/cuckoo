// Generated by CoffeeScript 1.9.3
var addEventListener, exports, nestId, nests, proto, removeEventListener;

exports = {
  Egg: function() {
    return console.log('Egg called with ', arguments);
  }
};

if (typeof EventTarget !== "undefined" && EventTarget !== null) {
  proto = EventTarget.prototype;
} else if (typeof Node !== "undefined" && Node !== null) {
  proto = Node.prototype;
} else {
  if (typeof console !== "undefined" && console !== null) {
    if (typeof console.log === "function") {
      console.log('EventTarget and Node are missing');
    }
  }
  return;
}

if (proto) {
  if (proto.addEventListener == null) {
    if (typeof console !== "undefined" && console !== null) {
      if (typeof console.log === "function") {
        console.log('addEventListener is missing');
      }
    }
    return;
  }
  if (proto.removeEventListener == null) {
    if (typeof console !== "undefined" && console !== null) {
      if (typeof console.log === "function") {
        console.log('removeEventListener is missing');
      }
    }
    return;
  }
  nestId = 0;
  nests = {};
  addEventListener = proto.addEventListener;
  proto.addEventListener = function(type, listener, useCapture) {
    var id, l, nest;
    l = listener;
    nest = function(event) {
      var e;
      try {
        exports.Egg.apply(this, arguments);
      } catch (_error) {
        e = _error;
      }
      return l.apply(this, arguments);
    };
    id = l.__nestId;
    if (id == null) {
      id = nestId++;
      l.__nestId = id;
      nests[id] = {
        nest: nest,
        count: 0
      };
    }
    nests[id].count++;
    return addEventListener.call(this, type, nest, useCapture);
  };
  removeEventListener = proto.removeEventListener;
  proto.removeEventListener = function(type, listener, useCapture) {
    var id, nest, nestRecord;
    id = listener.id;
    if (id == null) {
      nest = listener;
    } else {
      nestRecord = nests[id];
      nest = nestRecord.nest;
      nestRecord.count--;
      if (nestRecord.count === 0) {
        delete [nests.id];
      }
    }
    return removeEventListener(type, nest, useCapture);
  };
}

exports.Target = function(events) {
  return document.body.addEventListener(events, exports.Egg);
};

module.exports = exports;

//# sourceMappingURL=index.js.map
